/*
 * main.cu
 *
 *  Created on: 26-Sep-2017
 *      Author: sree
 */

// A C / C++ program for Prim's Minimum Spanning Tree (MST) algorithm.
// The program is for adjacency matrix representation of the graph

#include <bits/stdc++.h>

const int vertices = 5;

using namespace std;

void primMSTSerial(int graph[vertices][vertices], int src) {
	bool visited[vertices];
	int d[vertices];
	int parent[vertices];
	d[src] = 0;
	visited[src] = true;
	parent[0] = -1;

	for(int v = 0; v < vertices; v++){
		if(!visited[v])
			graph[src][v] ? d[v] = graph[src][v] : d[v] = INFINITY;
	}

	int ct = vertices - 1;
	while(ct--){
		int minimum = INT_MAX, u;
		for(int v = 0; v < vertices; v++){
			if(!visited[v]){
				if(d[v] < minimum){
					minimum = d[v];
					u = v;
				}
			}
		}
		visited[u] = true;
		for(int v = 0; v < vertices; v++){
			if(!visited[v]){
				d[v] = min(d[v], graph[u][v]);
				if(graph[u][v])
					parent[v] = u;
			}
		}
	}
	for(int v = 1; v < vertices; v++){
		printf("%d-%d : \n", parent[v], v);
	}
}



int main() {
	srand((unsigned)time(NULL));
	int graph[vertices][vertices];

	for(int i = 0; i < vertices; i++) {
		for(int j = i; j < vertices; j++){
			i == j ? graph[i][j] = 0 : graph[i][j] = graph[j][i] =  rand() % 10;
		}
	}
	for(int i = 0; i < vertices; i++) {
		for(int j = i; j < vertices; j++){
		}
		cout << endl;
	}

	primMSTSerial(graph, 0);

	return 0;
}
