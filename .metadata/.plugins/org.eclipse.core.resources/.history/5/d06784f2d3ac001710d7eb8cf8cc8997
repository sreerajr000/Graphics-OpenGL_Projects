/*
* main.cu
*
*  Created on: 26-Sep-2017
*      Author: sree
*/

#include <iostream>
#include <cstdio>
#include <algorithm>
#include <time.h>
#include <helper_cuda.h>
#include <helper_functions.h>
#include <cuda_runtime.h>
#include <device_launch_parameters.h>



timeval tStart;
int timing() {
    timeval tEnd;
    gettimeofday(&tEnd, 0);
    int t = (tEnd.tv_sec - tStart.tv_sec) * 1000000 + tEnd.tv_usec - tStart.tv_usec;
    tStart = tEnd;
    return t;
}
// calculate the id of the current thread
__device__ unsigned int getIdx(dim3* threads, dim3* blocks) {
	int x;
	return threadIdx.x + threadIdx.y * (x = threads->x) + threadIdx.z * (x *= threads->y) + blockIdx.x  * (x *= threads->z) + blockIdx.y  * (x *= blocks->z) +
		blockIdx.z  * (x *= blocks->y);
}


__global__ void gpuPrimFindMin(int *device_graph, int vertices, long nThreads, bool *mstSet, int *key, int *minArray, dim3* threads, dim3* blocks) {
	unsigned int idx = getIdx(threads, blocks);
	int start = idx * (vertices / nThreads);
	int end = min(start + (int)(vertices / nThreads), vertices);

	//Do it with all reduce
	//Have a min array with size(V/nthread) find min of minarray
	int minimum = INT_MAX;
	for (int v = start; v < end; v++) {
		if (mstSet[v] == false && key[v] < minimum)
			minimum = key[v];
	}
	minArray[idx] = minimum;

	//Do a synchronization here

}



void primMSTParallel(int graph[V*V], dim3 threadsPerBlock, dim3 blocksPerGrid) {
	int *device_graph;

	dim3* deviceThreads;
	dim3* deviceBlocks;

	checkCudaErrors(cudaMalloc((void**)&device_graph, V * V * sizeof(int)));
	checkCudaErrors(cudaMemcpy(device_graph, graph, V * V * sizeof(int), cudaMemcpyHostToDevice));

	checkCudaErrors(cudaMalloc((void**)&deviceThreads, sizeof(dim3)));
	checkCudaErrors(cudaMalloc((void**)&deviceBlocks, sizeof(dim3)));

	checkCudaErrors(cudaMemcpy(deviceThreads, &threadsPerBlock, sizeof(dim3), cudaMemcpyHostToDevice));
	checkCudaErrors(cudaMemcpy(deviceBlocks, &blocksPerGrid, sizeof(dim3), cudaMemcpyHostToDevice));

	long nThreads = threadsPerBlock.x * threadsPerBlock.y * threadsPerBlock.z * blocksPerGrid.x * blocksPerGrid.y * blocksPerGrid.z;
	std::cout << "nThreads : " << nThreads << std::endl;

}

int main() {
	//double start, stop;

	srand((unsigned)time(NULL));




	dim3 threadsPerBlock;
	dim3 blocksPerGrid;

	threadsPerBlock.x = 32;  threadsPerBlock.y = 24;   threadsPerBlock.z = 2;
	blocksPerGrid.x = 1;    blocksPerGrid.y = 1;    blocksPerGrid.z = 1;

	std::cout << "Total threads: " << threadsPerBlock.x * threadsPerBlock.y * threadsPerBlock.z *
		blocksPerGrid.x * blocksPerGrid.y * blocksPerGrid.z << "\n\n";

	timing();

	sieveSerial(n);

	std::cout << timing() << " microseconds : PrimSerial\n";

	sieveParallel(n, threadsPerBlock, blocksPerGrid);


	return 0;
}
