/*
 * snake.h
 *
 *  Created on: 12-Oct-2017
 *      Author: sree
 */

#ifndef SNAKE_H_
#define SNAKE_H_

#include <vector>
#include "snake_block.h"

class Snake{
public:
	std::vector<SnakeBlock> tail;
	SnakeBlock head;
};

void runSnake(Window *window, Shader shader, Shader simpleDepthShader, Shader skyboxShader){
	camera.Pitch = 0.0f;
	camera.Yaw = -90.0f;
	camera.updateCameraVectors();
	while (!glfwWindowShouldClose(window->window)) {
		camera.Position = glm::vec3(8.0f, 15.0f, 31.0f);
		glfwPollEvents();
		// per-frame time logic
		// --------------------
		float currentFrame = glfwGetTime();
		deltaTime = currentFrame - lastFrame;
		lastFrame = currentFrame;
		stepFrame = stepFrame + deltaTime;
		// input
		// -----
		processInput(window->window);

		// render
		// ------
		glClearColor(0.1f, 0.1f, 0.1f, 1.0f);
		glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

		step();
		//Game step
		if(stepFrame > 1/GLfloat(speed)){
			stepFrame = 0.0f;
			if(gameStep(window, shader, simpleDepthShader, skyboxShader)){
				std::cout << "Tetris Level Finished !!! \n";
				break;
			}
		}

		renderDepth(simpleDepthShader, TETRIS);
		renderScene(shader, TETRIS);
		renderSkyBox(skyboxShader);
		glfwSwapBuffers(window->window);

	}
}

#endif /* SNAKE_H_ */
