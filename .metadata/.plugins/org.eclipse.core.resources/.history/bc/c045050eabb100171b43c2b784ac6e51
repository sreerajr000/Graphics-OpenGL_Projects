#pragma once

#include "helpers.h"
#include "renderer.h"
#include "shader.h"
#include "md5_example.h"
#include "md5_model_data.h"
#include "md5_anim_data.h"
#include "md5_controller.h"

class Renderer;
class Shader;
class MD5Example;
struct ShaderMatrices;


class Scene
{
public:

	Scene ();
	~Scene ();

	void		Loop ();

public:
	GLFWwindow* window_
	Renderer*	renderer_;
	Shader* shader_;
	MD5Example* model_;
	ShaderMatrices* shader_mat_arr_;
};



Scene::Scene ()
{
	renderer_ = new Renderer ();

	if (!glfwInit ())
	{
		printf ("glfwInit");
		return;
	}
	glfwWindowHint (GLFW_CONTEXT_VERSION_MAJOR, 3);
	glfwWindowHint (GLFW_CONTEXT_VERSION_MINOR, 1);
	glfwWindowHint (GLFW_RESIZABLE, GL_FALSE);
	GLFWwindow* window_ = glfwCreateWindow ((int)display_size_.x, (int)display_size_.y, window_name_.c_str (), output, NULL);
	glfwMakeContextCurrent (window_);
	if (glewInit () != GLEW_OK)
	{
		printf ("VideoApi::VideoApi(): Cannot initialise GLEW!");
		glfwTerminate ();
		return;
	}

	shader_ = new Shader ("skinning.vert", "skinning.frag");
	model_ = new MD5Example ("Assets/Models/boblampclean.md5mesh", "Assets/Animations/boblampclean.md5anim");

	shader_mat_arr_ = new ShaderMatrices ();
	shader_mat_arr_->world_ = glm::rotate (glm::mat4 (1), glm::radians (-90.0f), glm::vec3 (1, 0, 0));
	shader_mat_arr_->view_ = glm::lookAt (glm::vec3 (0.0f, 25.0f, 200.0f), glm::vec3 (0.0f, 25.0f, 0.0f), glm::vec3 (0.0f, 1.0f, 0.0f));
	shader_mat_arr_->proj_ = renderer_->GetProjectionMatrix ();
}


Scene::~Scene ()
{
	delete shader_mat_arr_;
	delete model_;
	delete shader_;
	delete renderer_;
}


void Scene::Loop ()
{
	bool want_exit = false;

	while (!want_exit)
	{
		//renderer_->PollEvents ();
		glfwPollEvents();

		model_->Update (1.0f / 3000.0f);
		renderer_->Buffer_Clear ();

		shader_->SetShader ();
		shader_->SetShaderParameters (shader_mat_arr_, model_->anim_ctrl_->GetSkinnedPos (), model_->anim_ctrl_->GetSkinnedRot ());

		model_->Render ();

		renderer_->SwapBuffer ();
		//glfwSwapBuffers();
		want_exit = renderer_->ProcessCheckClose ();
	}
}


