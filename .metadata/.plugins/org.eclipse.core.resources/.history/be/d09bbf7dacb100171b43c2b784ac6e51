#pragma once


#define GLEW_STATIC 
#include "GL/glew.h"
//#include "GL/wglew.h"

#define GLFW_INCLUDE_NONE
#include <GLFW/glfw3.h>

#include "helpers.h"
#include <string>

namespace
{
	const glm::vec2 display_size_ (600,400);
	const std::string window_name_ ("SkinningGPU");
}

class Renderer
{
public:
	Renderer ()
	{
		proj_ = glm::mat4 (1);


		if (!glfwInit ())
		{
			printf ("glfwInit");
			return;
		}

		GLFWmonitor* output = NULL;
		glm::ivec2 position (16, 40);	// @NOTE: Window position.


		glfwWindowHint (GLFW_CONTEXT_VERSION_MAJOR, 3);
		glfwWindowHint (GLFW_CONTEXT_VERSION_MINOR, 1);
		glfwWindowHint (GLFW_RESIZABLE, GL_FALSE);


		window_ = glfwCreateWindow ((int)display_size_.x, (int)display_size_.y, window_name_.c_str (), output, NULL);

		glfwMakeContextCurrent (window_);




		if (glewInit () != GLEW_OK)
		{
			printf ("VideoApi::VideoApi(): Cannot initialise GLEW!");
			glfwTerminate ();
			return;
		}

		glClearColor (0.2f, 0.6f, 0.8f, 1.0f);

		glBlendFunc (GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
		glDisable (GL_BLEND);

		glCullFace (GL_BACK);
		glEnable (GL_CULL_FACE);

		glDepthFunc (GL_LEQUAL);
		glEnable (GL_DEPTH_TEST);

		glViewport (0, 0, static_cast<int>(display_size_.x), static_cast<int>(display_size_.y));
		proj_ = glm::perspective (glm::radians (45.0f), display_size_.x / display_size_.y, 0.01f, 1000.0f);
	}
	~Renderer ()
	{
		glfwTerminate ();
	}


	void Buffer_Clear ()
	{
		glClear (GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	}


	void PollEvents ()
	{
		glfwPollEvents ();
	}


	void SwapBuffer ()
	{
		glfwSwapBuffers (window_);
	}


	bool ProcessCheckClose () const
	{
		if (glfwWindowShouldClose (window_))
			return true;

		if (glfwGetKey (window_, GLFW_KEY_ESCAPE))
			return true;

		return false;
	}


	glm::mat4 GetProjectionMatrix () const
	{
		return proj_;
	}


private:

	glm::mat4				proj_;
	GLFWwindow*				window_;
};
