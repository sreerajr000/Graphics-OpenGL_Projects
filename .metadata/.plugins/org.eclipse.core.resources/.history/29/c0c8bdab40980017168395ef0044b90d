/*
 * block.h
 *
 *  Created on: 13-Sep-2017
 *      Author: sree
 */

#ifndef BLOCK_H_
#define BLOCK_H_

#include <vector>
#include <ctime>
#include <cstdlib>

std::vector<std::vector<std::vector<vector<int> > > > blocks = {
  {
    {
      {1, 1, 1},
      {0, 1, 0},
      {0, 0, 0}
    },
    {
      {0, 0, 1},
      {0, 1, 1},
      {0, 0, 1}
    },
    {
      {0, 0, 0},
      {0, 1, 0},
      {1, 1, 1}
    },
    {
      {1, 0, 0},
      {1, 1, 0},
      {1, 0, 0}
    }
  },
  {
    {
      {0, 0, 2, 0},
      {0, 0, 2, 0},
      {0, 0, 2, 0},
      {0, 0, 2, 0}
    },
    {
      {0, 0, 0, 0},
      {0, 0, 0, 0},
      {2, 2, 2, 2},
      {0, 0, 0, 0}
    }
  },
  {
    {
      {3, 3},
      {3, 3}
    }
  },
  {
    {
      {0, 4, 0},
      {0, 4, 0},
      {0, 4, 4}
    },
    {
      {0, 0, 0},
      {0, 0, 4},
      {4, 4, 4}
    },
    {
      {0, 4, 4},
      {0, 0, 4},
      {0, 0, 4}
    },
    {
      {4, 4, 4},
      {4, 0, 0},
      {0, 0, 0}
    }
  },
  {
    {
      {0, 5, 0},
      {0, 5, 0},
      {5, 5, 0}
    },
    {
      {0, 0, 0},
      {5, 0, 0},
      {5, 5, 5}
    },
    {
      {5, 5, 0},
      {5, 0, 0},
      {5, 0, 0}
    },
    {
      {5, 5, 5},
      {0, 0, 5},
      {0, 0, 0}
    }
  },
  {
    {
      {6, 6, 0},
      {0, 6, 6},
      {0, 0, 0}
    },
    {
      {0, 6, 0},
      {6, 6, 0},
      {6, 0, 0}
    }
  },
  {
    {
      {0, 7, 7},
      {7, 7, 0},
      {0, 0, 0}
    },
    {
      {7, 0, 0},
      {7, 7, 0},
      {0, 7, 0}
    }
  }
};

class Block{
private:
	int x = 4, y = 0;
	srand(time(NULL));
	int blockid = glm::floor(rand() % 7);
	int orient = 0;

public:
	void draw() {
		//Set the color or something
		for(int i = 0; i < blocks[blockid][orient].size(); i++) {
			for(int j = 0; j < blocks[blockid][orient][i].size(); j++){
				if(blocks[blockid][orient][i][j]){
					//Draw the block at some offset to this.x and this.y

				}
			}
		}
	}

	void rotateBlock() {
		y--;
		orient = (++orient) % (blocks[blockid].size);
	}

	void urotateBlock() {
	    if (orient == 0)
	    	orient = blocks[blockid].size() - 1;
	    else
	    	orient = (--orient) % (blocks[blockid].size());
	 }
};

/*
var block = function() {
  this.x = 4;
  this.y = 0;
  this.blockid = Math.floor(Math.random() * 7);
  this.orient = 0;

  this.draw = function() {
    fill(cols[this.blockid + 1]);
    for (var i = 0; i < blocks[this.blockid][this.orient].length; i++) {
      for (var j = 0; j < blocks[this.blockid][this.orient][i].length; j++) {
        if (blocks[this.blockid][this.orient][i][j])
          rect(24 * (j + this.x) + 12, 24 * (i + this.y) + 12, 24, 24);
      }
    }
  }

  this.rotateBlk = function() {
    this.y--;
    this.orient = (++this.orient) % (blocks[this.blockid].length);
  }

  this.urotateBlk = function() {
    if (this.orient == 0) this.orient = blocks[this.blockid].length - 1;
    else
      this.orient = (--this.orient) % (blocks[this.blockid].length);
  }
  this.checkCollision = function() {
    var blk = blocks[this.blockid][this.orient];
    //check sides
    for (var i = 0; i < blk.length; i++) {
      for (var j = 0; j < blk[i].length; j++) {
        if (blk[i][j]) {
          if (this.x + j < 0 || this.x + j > 9)
            return true;
        }
      }
    }

    for (var i = 0; i < blk.length; i++) {
      for (var j = 0; j < blk[i].length; j++) {
        if (blk[i][j]) {
          if (this.y + i > 17)
            return true;
        }
      }
    }

    for (var i = 0; i < blk.length; i++) {
      for (var j = 0; j < blk[i].length; j++) {
        if (blk[i][j])
          if (frame[this.y + i][this.x + j] > 0)
            return true;
      }
    }
    return false;
  }

  this.addtoFrame = function() {
    this.y--;
    var blk = blocks[this.blockid][this.orient];
    for (var i = 0; i < blk.length; i++) {
      for (var j = 0; j < blk[i].length; j++) {
        if (blk[i][j]) {
          frame[this.y + i][this.x + j] = blk[i][j];
        }
      }
    }
  }
}
*/
#endif /* BLOCK_H_ */
